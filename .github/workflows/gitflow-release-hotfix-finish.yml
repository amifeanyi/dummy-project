name: Release and Hotfix Finish

###
#
# Finishes Git flow for release and hotfixes
#
# Trigger: code merged into master branch
#
###

on:
  pull_request:
    branches:
      - master
    types:
      - closed

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && (startsWith(github.event.pull_request.head.ref, 'release/') || startsWith(github.event.pull_request.head.ref, 'hotfix/'))
    strategy:
      matrix:
        java: [ 11 ]
    name: Make a release
    env:
      GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

    # Set flow type
    steps:
      - id: flow-type
        run:  |
          echo ::set-output name=release::${{ startsWith(github.event.pull_request.head.ref, 'release/') }}
          echo ::set-output name=hotfix::${{ startsWith(github.event.pull_request.head.ref, 'hotfix/') }}
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
            ${{ runner.os }}-

      - name: Setup java ${{ matrix.java }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.java }}

      # Get project version from ref - merged branch
      - name: Get Project Version
        id: target
        run: |
          MAJOR=$( mvn help:evaluate -Dexpression=project.artifact.selectedVersion.majorVersion -q -DforceStdout )
          MINOR=$( mvn help:evaluate -Dexpression=project.artifact.selectedVersion.minorVersion -q -DforceStdout )
          INCREMENTAL=$( mvn help:evaluate -Dexpression=project.artifact.selectedVersion.incrementalVersion -q -DforceStdout )
          echo ::set-output name=version::`echo $MAJOR.$MINOR.$INCREMENTAL`
          echo ::set-output name=major_minor::`echo $MAJOR.$MINOR`

      - name: Set git username and email
        run: |
          git config --global user.email "bot@backbase.com"
          git config --global user.name "Release BOT"

      # Update master version
      - uses: actions/checkout@v2
        with:
          ref: master
      - name: Update master version
        if: steps.flow-type.outputs.release == 'true'
        run: |
          mvn build-helper:parse-version versions:set -DnewVersion=\${{ steps.target.outputs.version }} versions:commit

      - name: Push updated version to origin/master
        if: steps.flow-type.outputs.release == 'true'
        run: |
          git add --all
          git commit --allow-empty -m "update version - release"
          git push

      # Tag master
      # Todo: extract product version from project and use it for tagging - eg 2021.01-0.3.1
      - uses: actions/checkout@v2
        with:
          ref: master
      - name: Add tag
        run: |
          git tag -a ${{ steps.target.outputs.version }} -m "Release ${{ steps.target.outputs.version }}"
          git push origin ${{ steps.target.outputs.version }}

      # If it's a release(major & minor) reset incrementalVersion for next dev lifecycle - target branch - develop
      # else if it's a hotfix merge bump the incremental version - target branch - develop
      - uses: actions/checkout@v2
        with:
          ref: develop
      - name: Update develop version
        run: |
          if ${{ steps.flow-type.outputs.release }} == 'true'
          then
            mvn build-helper:parse-version versions:set -DnewVersion=\${{ steps.target.outputs.major_minor }}.0-SNAPSHOT versions:commit
            git add --all
            git commit -m "update version - next development version"
            git push
          elif ${{ steps.flow-type.outputs.hotfix }} == 'true'
          then
            mvn build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion}.\${parsedVersion.nextIncrementalVersion}-SNAPSHOT versions:commit
            git add --all
            git commit -m "update version - next development version"
            git push
          fi

      - name: Delete ${{ github.event.pull_request.head.ref }} branch
        run: |
          git fetch
          git push origin --delete ${{ github.event.pull_request.head.ref }}